---
import type { HTMLAttributes } from 'astro/types'
import Error from '@/components/ui/Error.astro'

type Props = {
  label: string
  type: HTMLAttributes<'input'>['type']
  name: HTMLAttributes<'input'>['name']
  isTextarea?: boolean
  error?: string
}

const { label, type, name, isTextarea, error } = Astro.props

const Element = isTextarea ? 'textarea' : 'input'
---

<label>
  <p class="label">{label}</p>
  <Element type={type} name={name} placeholder=" " aria-invalid={!!error} />
  {error && <Error error={error} />}
</label>

<style lang="scss">
  .label {
    color: var(--neutral-300, #b8b8b8);
    font-size: calc(12rem / 16);
    line-height: 158%;
    margin-bottom: calc(2rem / 16);
  }
  input,
  textarea {
    border: 1px solid var(--neutral-500, #6f6f6f);
    background-color: var(--neutral-000, #fcfcfc);
    padding: calc(8rem / 16) calc(12rem / 16);
    width: 100%;
    color: var(--neutral-700, #222);
    transition: background-color 0.5s var(--easing);
    font-size: 1rem;
    &:hover {
      background-color: var(--primary-100, #edebe7);
    }
    &:not(:placeholder-shown) {
      background-color: var(--neutral-000, #fcfcfc);
    }
    &:focus-visible {
      outline: none;
      background-color: var(--primary-100, #edebe7);
    }
    &[aria-invalid='true'] {
      border: 1px solid var(--error-500, #ff6a59);
      background: var(--error-100, #ffe2de);
    }
  }
  input {
    height: 44px;
  }
  textarea {
    min-height: calc(82rem / 16);
    max-height: calc(233rem / 16);
    resize: none;
    field-sizing: content;
  }
</style>
