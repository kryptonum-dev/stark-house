---
import PortableText, { PortableTextQuery, type PortableTextValue } from '@components/ui/portable-text'
import Image, { ImageDataQuery, type ImageDataProps } from '@components/ui/image'

export const Partners_Query = `
  _type == "Partners" => {
    ${PortableTextQuery('heading')}
    ${PortableTextQuery('paragraph')}
    review {
      ${ImageDataQuery('img')}
      name,
      position,
      ${PortableTextQuery('content')}
    },
    partners[] {
      ${ImageDataQuery('img')}
      name,
      link
    }
  },
`

export type Props = {
  index: number
  sectionId?: string
  heading: PortableTextValue
  paragraph: PortableTextValue
  review: {
    img: ImageDataProps
    name: string
    position?: string
    content: PortableTextValue
  }
  partners: Array<{
    img: ImageDataProps
    name: string
    link?: string
  }>
}

const { index, sectionId, heading, paragraph, review, partners } = Astro.props
---

<section class="Partners sec-wo-margin" id={sectionId} light-background>
  <div class="max-width">
    <header>
      <PortableText value={heading} heading={index === 0 ? 'h1' : 'h2'} class="heading" />
      <PortableText value={paragraph} class="paragraph" />
    </header>
    <div class="column">
      <div class="review">
        <div class="stars">
          {
            Array.from({ length: 5 }).map(() => (
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="25" fill="none" viewBox="0 0 24 25">
                <path
                  fill="#DEAD26"
                  d="M10.885 1.278a1.188 1.188 0 0 1 2.23 0l2.434 6.123c.175.437.568.736 1.019.774l6.32.53c1.07.09 1.504 1.487.688 2.218l-4.814 4.314a1.298 1.298 0 0 0-.39 1.252l1.472 6.45c.249 1.094-.888 1.957-1.804 1.372l-5.41-3.457a1.162 1.162 0 0 0-1.26 0l-5.41 3.457c-.916.585-2.053-.278-1.804-1.371l1.471-6.45a1.298 1.298 0 0 0-.389-1.253L.424 10.923c-.816-.73-.382-2.128.689-2.218l6.319-.53A1.213 1.213 0 0 0 8.45 7.4l2.435-6.123Z"
                />
              </svg>
            ))
          }
        </div>
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="none" viewBox="0 0 20 20">
          <path
            fill="#CCC5B4"
            d="M19.5.722v2.935a4.507 4.507 0 0 0-2.323 1.55c-.609.76-1.079 1.74-1.41 2.935-.277 1.196-.415 2.501-.415 3.914h3.235v7.666h-7.052v-6.769c0-3.098.442-5.49 1.327-7.176.886-1.74 1.936-2.962 3.153-3.669C17.232 1.347 18.394.885 19.5.722Zm-11.035 0v2.935c-.996.272-1.798.789-2.406 1.55-.553.76-.996 1.74-1.328 2.935-.276 1.196-.414 2.501-.414 3.914h3.235v7.666H.5v-6.769c0-3.098.443-5.49 1.328-7.176.885-1.74 1.935-2.962 3.152-3.669C6.197 1.347 7.36.885 8.465.722Z">
          </path>
        </svg>
        <PortableText value={review.content} class="content" />
        <Image {...review.img} sizes="56px" />
        <div class="header">
          <p class="name">{review.name}</p>
          {review.position && <p class="position">{review.position}</p>}
        </div>
      </div>
      <div class="partners-grid">
        {
          partners.map((partner) =>
            partner.link ? (
              <a
                href={partner.link}
                class="partner-item"
                target="_blank"
                rel="noopener noreferrer"
                aria-label={partner.name}>
                <Image {...partner.img} sizes="144px" />
              </a>
            ) : (
              <div class="partner-item">
                <Image {...partner.img} sizes="144px" />
              </div>
            )
          )
        }
      </div>
    </div>
  </div>
</section>

<style lang="scss">
  .Partners {
    padding: clamp(3rem, calc(5vw / 0.48), 5rem) 0;
    position: relative;
    z-index: 1;
    &::before {
      content: '';
      width: 100%;
      max-width: 400px;
      aspect-ratio: 1/1;
      background: linear-gradient(#fff1cc, rgba(255, 245, 218, 0));
      position: absolute;
      top: 0;
      left: 0;
      z-index: -1;
      clip-path: polygon(0 0, 38% 0, 100% 100%, 0% 100%);
    }
    header {
      max-width: 34rem;
      margin-bottom: clamp(3rem, calc(5vw / 0.48), 5rem);
      .paragraph {
        margin-top: 1.5rem;
      }
    }
    .column {
      display: grid;
      gap: clamp(calc(42rem / 16), calc(48vw / 7.68), calc(48rem / 16));
      grid-template-columns: 1fr 1fr;
      @media (max-width: 69rem) {
        grid-template-columns: 1fr;
        max-width: 48rem;
      }
      .review {
        margin-top: 2rem;
        display: grid;
        grid-template-columns: 3.5rem 1fr;
        gap: 1.5rem 1rem;
        align-self: flex-end;
        .stars {
          grid-column: 1/-1;
          display: flex;
          gap: 8px;
          svg {
            width: 16px;
            height: 16px;
          }
        }
        img {
          width: 3.5rem;
          height: 3.5rem;
          border-radius: 50%;
        }
        .header {
          align-self: center;
          .position {
            font-size: 0.875rem;
          }
        }
        svg {
          justify-self: center;
        }
        .content {
          font-size: 0.875rem;
        }
      }
      .partners-grid {
        display: grid;
        gap: 1rem;
        align-content: flex-end;
        grid-template-columns: 1fr 1fr 1fr;
        @media (max-width: 40rem) {
          grid-template-columns: 1fr 1fr;
        }
        .partner-item {
          display: flex;
          align-items: center;
          justify-content: center;
          border: 1px solid rgba(13, 12, 11, 0.15);
          min-height: clamp(4rem, calc(5vw / 0.48), 7rem);
          padding: 1rem;
          background-color: #fff;
          img {
            max-width: 9rem;
            max-height: 2rem;
            width: 100%;
            height: auto;
            object-fit: contain;
          }
        }
      }
    }
  }
</style>
