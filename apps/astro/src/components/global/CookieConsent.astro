---
import Switch from '@/components/ui/Switch.astro'
import Button from '@/components/ui/Button'

const GTM_CONTAINER_ID = 'GTM-KDTPBM4N'

const groups = [
  {
    id: 'necessary',
    name: 'Niezbędne',
    description: `Niezbędne pliki cookie pomagają uczynić naszą stronę użyteczną, umożliwiając działanie podstawowych funkcji, takich jak nawigacja po stronie internetowej czy dostęp do bezpiecznych obszarów strony. Bez tych plików cookie niektóre podstawowe funkcje strony nie będą działać prawidłowo.`,
  },
  {
    id: 'marketing',
    name: 'Marketingowe',
    description: `Pliki cookie marketingowe są używane do śledzenia odwiedzających na stronach internetowych. Ich celem jest wyświetlanie reklam, które są istotne i interesujące dla indywidualnych użytkowników, a tym samym bardziej wartościowe dla wydawców i zewnętrznych reklamodawców.`,
  },
  {
    id: 'analytics',
    name: 'Analityczne',
    description: `Pliki cookie analityczne pomagają nam zrozumieć, w jaki sposób użytkownicy wchodzą w interakcje z naszą stroną internetową, zbierając i raportując informacje anonimowo. Te dane są wykorzystywane do doskonalenia struktury i treści strony.`,
  },
  {
    id: 'preferences',
    name: 'Preferencyjne',
    description: `Pliki cookie preferencyjne pozwalają stronie internetowej zapamiętywać informacje, które zmieniają sposób, w jaki strona się zachowuje lub wygląda, takie jak preferowany język lub region, w którym się znajdujesz.`,
  },
]
---

<noscript>
  <iframe
    src={`https://www.googletagmanager.com/ns.html?id=${GTM_CONTAINER_ID}`}
    height="0"
    width="0"
    style="display:none;visibility:hidden;">
  </iframe>
</noscript>
<aside class="cookie-consent" aria-hidden="true">
  <section class="content">
    <header class="header">
      <div data-header-initial>
        <h2 class="heading">Korzystając ze strony zgadzasz się na użycie ciasteczek</h2>
        <p>
          Korzystamy z cookie i podobnych technologii, by analizować ruch na stronie, dopasować ją do Ciebie
          i wyświetlać trafniejsze reklamy. <a href="/polityka-prywatnosci" class="link">Dowiedz się więcej</a>
        </p>
      </div>
      <div data-header-settings style="display: none">
        <h3 class="heading">Ustawienia cookies</h3>
        <p>
          Korzystając ze strony zgadzasz się na użycie tych ciasteczek. <a href="/polityka-prywatnosci" class="link">
            Dowiedz się więcej
          </a>
        </p>
      </div>
    </header>
    <div class="settings" style="display: none" data-lenis-prevent>
      {
        groups.map(({ id, name, description }) => (
          <label for={id} data-group={id} style={{ ...(id === 'necessary' && { cursor: 'not-allowed' }) }}>
            <Switch
              {...(id === 'necessary' && {
                style: { cursor: 'not-allowed' },
              })}
              inputProps={{
                id,
                ...(id === 'necessary' && {
                  disabled: true,
                  checked: true,
                }),
              }}
              class="switch"
            />
            <p>{name}</p>
            <p class="description">{description}</p>
          </label>
        ))
      }
    </div>
    <div class="actions">
      <Button className="agree">Zgoda na wszystkie</Button>
      <Button className="setPreferences" theme="secondary">Ustaw preferencje</Button>
      <Button className="deny" theme="secondary">Odmowa</Button>
    </div>
  </section>
</aside>

<style lang="scss">
  .cookie-consent {
    padding: clamp(calc(16rem / 16), calc(24vw / 7.68), calc(32rem / 16)) var(--page-margin);
    &[aria-hidden='true'] {
      display: none;
    }
    z-index: 10;
    position: fixed;
    left: 0;
    top: 0;
    right: 0;
    bottom: 0;
    background: rgba(37, 37, 37, 0.2);
    backdrop-filter: blur(4px);
    display: grid;
    place-items: center;
  }
  .content {
    max-height: calc(100vh - clamp(calc(16rem / 16), calc(24vw / 7.68), calc(32rem / 16)) * 2);
    max-height: calc(100dvh - clamp(calc(16rem / 16), calc(24vw / 7.68), calc(32rem / 16)) * 2);
    padding: clamp(calc(16rem / 16), calc(24vw / 7.68), calc(32rem / 16));
    border: 1px solid var(--neutral-600, #3b3b3b);
    background: var(--neutral-700, #222);
    max-width: calc(794rem / 16);
    display: flex;
    flex-direction: column;
    gap: clamp(calc(24rem / 16), calc(32vw / 7.68), calc(32rem / 16));
    .heading {
      font-size: clamp(calc(18rem / 16), calc(24vw / 7.68), calc(28rem / 16));
      margin-bottom: clamp(calc(12rem / 16), calc(16vw / 7.68), calc(16rem / 16));
    }
    .settings {
      display: flex;
      flex-direction: column;
      gap: clamp(12px, calc(20vw / 7.68), 20px);
      overflow-y: auto;
      overscroll-behavior: contain;
      label {
        display: grid;
        grid-template-columns: auto 1fr;
        gap: 4px clamp(calc(16rem / 16), calc(24vw / 7.68), calc(24rem / 16));
        .switch {
          position: sticky;
          top: 0;
          grid-row: 1 / span 2;
        }
        .description {
          font-size: 0.875em;
        }
      }
    }
  }
  .actions {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    gap: calc(12rem / 16);
    button:first-child {
      margin-right: auto;
    }
    @media (max-width: 709px) {
      button {
        width: 100%;
        &:first-child {
          margin-bottom: calc(12rem / 16);
        }
      }
    }
  }
</style>

<script is:inline>
  window.dataLayer = window.dataLayer || []
  function gtag() {
    window.dataLayer.push(arguments)
  }
  function getCookie(name) {
    const cookieString = document.cookie
    if (!cookieString) return null
    const cookies = cookieString.split(';').map((cookie) => cookie.trim())
    const cookie = cookies.find((cookie) => cookie.startsWith(`${name}=`))
    if (cookie) {
      const cookieValue = cookie.substring(name.length + 1)
      return decodeURIComponent(cookieValue)
    }
    return null
  }
  function setCookie(name, value, days = 1) {
    const date = new Date(Date.now() + 24 * 60 * 60 * 1000 * days)
    const expires = days ? `; expires=${date.toUTCString()}` : ''
    const cookieValue = encodeURIComponent(value)
    document.cookie = `${name}=${cookieValue}${expires}; SameSite=Strict`
  }
  function setConsent(consent) {
    const consentMode = {
      functionality_storage: consent.necessary ? 'granted' : 'denied',
      security_storage: consent.necessary ? 'granted' : 'denied',
      ad_storage: consent.marketing ? 'granted' : 'denied',
      ad_user_data: consent.marketing ? 'granted' : 'denied',
      ad_personalization: consent.marketing ? 'granted' : 'denied',
      analytics_storage: consent.analytics ? 'granted' : 'denied',
      personalization_storage: consent.preferences ? 'granted' : 'denied',
    }
    gtag('consent', 'update', consentMode)
    setCookie('cookie-consent', JSON.stringify(consentMode), 365)
  }
  if (getCookie('cookie-consent') === null) {
    gtag('consent', 'default', {
      functionality_storage: 'denied',
      security_storage: 'denied',
      ad_storage: 'denied',
      ad_user_data: 'denied',
      ad_personalization: 'denied',
      analytics_storage: 'denied',
      personalization_storage: 'denied',
    })
    document.querySelector('.cookie-consent').setAttribute('aria-hidden', 'false')
  } else {
    gtag('consent', 'default', JSON.parse(getCookie('cookie-consent')))
  }
  const $this = document.querySelector('.cookie-consent')
  const $agree = $this.querySelector('.agree')
  const $setPreferences = $this.querySelector('.setPreferences')
  const $deny = $this.querySelector('.deny')
  $agree.addEventListener('click', () => {
    setConsent({
      necessary: true,
      marketing: true,
      analytics: true,
      preferences: true,
    })
    $this.setAttribute('aria-hidden', 'true')
  })
  let setsPreferences = false
  $setPreferences.addEventListener('click', () => {
    if (!setsPreferences) {
      $this.querySelector('.header [data-header-initial]').style.display = 'none'
      $this.querySelector('.header [data-header-settings]').style.removeProperty('display')
      $this.querySelector('.settings').style.removeProperty('display')
      setsPreferences = true
    } else {
      $this.setAttribute('aria-hidden', 'true')
      setConsent({
        necessary: $this.querySelector<HTMLInputElement>('input[id="necessary"]').checked,
        marketing: $this.querySelector<HTMLInputElement>('input[id="marketing"]').checked,
        analytics: $this.querySelector<HTMLInputElement>('input[id="analytics"]').checked,
        preferences: $this.querySelector<HTMLInputElement>('input[id="preferences"]').checked,
      })
    }
  })
  $deny.addEventListener('click', () => {
    $this.setAttribute('aria-hidden', 'true')
    setConsent({
      necessary: false,
      marketing: false,
      analytics: false,
      preferences: false,
    })
  })
</script>

<script is:inline define:vars={{ GTM_CONTAINER_ID }} type="text/partytown">
  // prettier-ignore
  ;(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
  new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
  j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
  'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
  })(window,document,'script','dataLayer',GTM_CONTAINER_ID);
</script>
