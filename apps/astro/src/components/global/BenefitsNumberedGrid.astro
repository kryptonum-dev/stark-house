---
import PortableText, { PortableTextQuery, type PortableTextValue } from '@components/ui/portable-text'

export const BenefitsNumberedGrid_Query = `
  {
    ${PortableTextQuery('heading')}
    ${PortableTextQuery('paragraph')}
    benefits[] {
      ${PortableTextQuery('title')}
      ${PortableTextQuery('description')}
    },
  },
`

export type Props = {
  index: number
  sectionId?: string
  heading: PortableTextValue
  paragraph: PortableTextValue
  benefits: {
    title: PortableTextValue
    description: PortableTextValue
  }[]
}

const { index, sectionId, heading, paragraph, benefits } = Astro.props
---

<section class="BenefitsNumberedGrid" id={sectionId}>
  <header>
    <PortableText value={heading} heading={index === 0 ? 'h1' : 'h2'} class="heading" />
    <PortableText value={paragraph} />
  </header>
  <ol class="list">
    {
      benefits.map(({ title, description }) => (
        <li class="item">
          <PortableText value={title} heading={index === 0 ? 'h2' : 'h3'} class="heading" />
          <PortableText value={description} />
        </li>
      ))
    }
  </ol>
</section>

<style lang="scss">
  .BenefitsNumberedGrid {
    padding: clamp(calc(48rem / 16), calc(64vw / 7.68), calc(96rem / 16)) 0;
    header {
      max-width: calc(608rem / 16);
      margin-bottom: clamp(calc(48rem / 16), calc(64vw / 7.68), calc(96rem / 16));
      .heading {
        margin-bottom: clamp(calc(12rem / 16), calc(20vw / 7.68), calc(20rem / 16));
      }
    }
  }
  .list {
    display: grid;
    gap: clamp(calc(42rem / 16), calc(56vw / 7.68), calc(56rem / 16))
      clamp(calc(32rem / 16), calc(48vw / 7.68), calc(48rem / 16));
    counter-reset: counter;
    @media (min-width: calc(1100rem / 16)) {
      grid-template-columns: 1fr 1fr 1fr 1fr;
    }
    .item {
      max-width: calc(582rem / 16);
      counter-increment: counter;
      &::before {
        content: '0' counter(counter);
        display: block;
        font-weight: 600;
        color: var(--neutral-300, #b8b8b8);
        font-size: clamp(calc(32rem / 16), calc(48vw / 7.68), calc(48rem / 16));
        margin-bottom: clamp(calc(20rem / 16), calc(32vw / 7.68), calc(48rem / 16));
      }
    }
    .heading {
      font-size: clamp(calc(24rem / 16), calc(28vw / 7.68), calc(28rem / 16));
      margin-bottom: clamp(calc(12rem / 16), calc(20vw / 7.68), calc(20rem / 16));
    }
  }
</style>
