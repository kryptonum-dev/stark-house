---
import PortableText, { PortableTextQuery, type PortableTextValue } from '@components/ui/portable-text'
import CountUp from '../ui/count-up.astro'

export const MetricsHighlightSection_Query = `
  _type == "MetricsHighlightSection" => {
    ${PortableTextQuery('heading')}
    ${PortableTextQuery('paragraph')}
    metrics[] {
      value,
      description
    },
  },
`

export type Props = {
  index: number
  sectionId?: string
  heading: PortableTextValue
  paragraph?: PortableTextValue
  metrics: {
    value: string
    description: string
  }[]
}

const { index, sectionId, heading, paragraph, metrics } = Astro.props
---

<section class="MetricsHighlightSection" id={sectionId}>
  <header>
    <PortableText value={heading} heading={index === 0 ? 'h1' : 'h2'} class="heading" />
    {paragraph && <PortableText value={paragraph} class="paragraph" />}
  </header>
  <ul class="metrics">
    {
      metrics?.map(({ value, description }) => (
        <li class="metric">
          <CountUp class="value">{value}</CountUp>
          <p class="description">{description}</p>
        </li>
      ))
    }
  </ul>
</section>

<style lang="scss">
  .MetricsHighlightSection {
    padding: clamp(3rem, calc(5vw / 0.48), 7rem) 0;
    header {
      max-width: 48rem;
      margin-bottom: clamp(2rem, calc(3vw / 0.48), 3rem);
      .paragraph {
        margin-top: 1.5rem;
      }
    }
    .metrics {
      max-width: 68rem;
      display: flex;
      flex-wrap: wrap;
      gap: 1.5rem 4rem;
      .metric {
        max-width: 25%;
        @media (max-width: 65rem) {
          max-width: 50%;
        }
        @media (max-width: 47rem) {
          width: 100%;
          max-width: 100%;
        }
        .value {
          vertical-align: middle;
          display: inline-block;
          color: var(--primary-400, #dead26);
          font-size: 2.25rem;
        }
        .description {
          margin-top: 0.5rem;
        }
      }
    }
  }
</style>
