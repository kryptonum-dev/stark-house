---
import type { ComponentProps } from 'astro/types'
import LandingFeature, { LandingFeature_Query } from '@/components/global/LandingFeature.astro'
import FullWidthPhoto, { FullWidthPhoto_Query } from '@/components/global/FullWidthPhoto.astro'
import BenefitsGrid, { BenefitsGrid_Query } from '@/components/global/BenefitsGrid.astro'
import ImagedBenefitsSection, { ImagedBenefitsSection_Query } from '@/components/global/ImagedBenefitsSection.astro'
import MetricsHighlightSection, {
  MetricsHighlightSection_Query,
} from '@/components/global/MetricsHighlightSection.astro'

const components = {
  LandingFeature,
  FullWidthPhoto,
  BenefitsGrid,
  ImagedBenefitsSection,
  MetricsHighlightSection,
}

type ComponentsMap = {
  [Component in keyof typeof components]: {
    _type: Component
  } & ComponentProps<(typeof components)[Component]>
}

export type ComponentsProps = Array<ComponentsMap[keyof typeof components]>

type Props = {
  data: ComponentsProps
  indexStart?: number
}

const { data, indexStart = 0 } = Astro.props

export const Components_Query = /* groq */ `
  components[] {
    _type,
    _type == "LandingFeature" => ${LandingFeature_Query}
    _type == "FullWidthPhoto" => ${FullWidthPhoto_Query}
    _type == "BenefitsGrid" => ${BenefitsGrid_Query}
    _type == "ImagedBenefitsSection" => ${ImagedBenefitsSection_Query}
    _type == "MetricsHighlightSection" => ${MetricsHighlightSection_Query}
  },
`
---

{
  data?.map((item, i) => {
    const DynamicComponent = components[item._type] as any
    if (!DynamicComponent) return null
    return <DynamicComponent {...item} index={indexStart + i} />
  })
}
